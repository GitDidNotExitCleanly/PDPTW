import model.DTTable;
import model.Key;
import model.Solution;
import model.VehicleProperty;


public class Overall {
	private VehicleProperty vp;
	
	public Overall(VehicleProperty vp) {
		this.vp = vp;
	}

	public void run() {
		ProduceInitialSolution pis = new ProduceInitialSolution(vp);
		Solution Sb = pis.produceInitialSolution();
		
		Metaheuristic m = new Metaheuristic(50,0.95,4,vp); // initial Temperature , cooling ratio , MSNI
		int K = ( (20*vp.getTotalVehicles())/3 )+1;											// K
		
		int gNoImpro = 0;
		double[] currentBestCost = Sb.cost();
		while (gNoImpro < K) {
			Solution s = Sb;
			Solution Sb_temp = m.tabu_Embedded_SA(s);
			
			if (compareSolutionCost(Sb_temp.cost(),currentBestCost) > 0) {
				currentBestCost = Sb_temp.cost();
				Sb = Sb_temp;
				gNoImpro = 0;
				
				/////////////////
				System.out.println("get a better solution!");
				////////////////
				
			}
			else {
				
				/////////////////
				System.out.println("get a worse solution!");
				/////////////////
				
				gNoImpro ++;
			}
		}
		
		Sb.printSolution();
		
		double[] cost = Sb.cost();
		System.out.println("NV: "+(int)cost[0]+" TC: "+cost[1]+" SD: "+cost[2]+" WT: "+cost[3]);
		
		///////////
		double arrivalTime = 0;
		double beginService;
		double finishService;
		int late = 0;
		for (int i=0;i<Sb.size();i++) {
			arrivalTime = 0;
			arrivalTime += DTTable.getSingleInstance().getDTForDepot(Sb.get(i).get(0).getID()).getDistance();
			beginService = Math.max(arrivalTime, Sb.get(i).get(0).getE_time());
			finishService = Math.max(arrivalTime, Sb.get(i).get(0).getE_time())+Sb.get(i).get(0).getService_time();
			late = Sb.get(i).get(0).getL_time() - (int)Math.max(arrivalTime, Sb.get(i).get(0).getE_time());
			System.out.print(late+" ");
			for (int j = 1;j<Sb.get(i).size();j++) {
				arrivalTime = finishService + DTTable.getSingleInstance().get(new Key(Sb.get(i).get(j-1).getID(),Sb.get(i).get(j).getID())).getDistance();
				beginService = Math.max(arrivalTime, Sb.get(i).get(j).getE_time());
				finishService = beginService + Sb.get(i).get(j).getService_time();
				late = Sb.get(i).get(j).getL_time() - (int)beginService;
				System.out.print(late+ " ");
			}
			System.out.println();
		} 
		
		/////////////////
		
	}
	
	private int compareSolutionCost(double[] targetCost,double[] currentBestCost) {
		for (int i=0;i<4;i++) {
			if (targetCost[i] != currentBestCost[i]) {
				if ()
				return (targetCost[i]<currentBestCost[i])? 1:-1;
			}
		}
		return 0;
	}
}
