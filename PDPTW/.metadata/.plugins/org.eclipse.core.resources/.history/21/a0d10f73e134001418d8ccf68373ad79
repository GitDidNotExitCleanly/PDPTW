import java.util.Vector;

import model.Customer;
import model.Customers;
import model.Route;
import model.Solution;
import model.Tabu;
import model.VehicleProperty;

public class Metaheuristic {
	
	private final int INITIALTEMPERATURE;
	private int TEMPERATURE;
	private double COOLINGRATIO;
	private int MSNI;		// max number of iterations without improvement
	
	private VehicleProperty vp;
	private NeighborhoodFunc nf;
	private ReorderRecordedRoutes rrr;
	
	public Metaheuristic(int initialTemperature,double coolingRatio,int msni,VehicleProperty vp) {
		this.INITIALTEMPERATURE = initialTemperature;
		this.TEMPERATURE = initialTemperature;
		this.COOLINGRATIO = coolingRatio;
		this.MSNI = msni;
		
		this.vp = vp;
		this.nf = new NeighborhoodFunc(this.vp);
		this.rrr = new ReorderRecordedRoutes(this.vp);
	}
	
	public Solution tabu_Embedded_SA(Solution input) {
		// restart simulated annealing
		this.TEMPERATURE = this.INITIALTEMPERATURE;
		Tabu.getSingleInstance().clear();
		
		Solution Sb = nf.DLS_PDS_PDE(input);
		Sb = nf.DLS_PDR(Sb, 10);						/// PDR 10 times
		
		Solution s = Sb;
		
		int NoImpr = 0;
		Object[] currentBestCost = Sb.cost();
		while (NoImpr < this.MSNI) {

			Solution s_temp = metropolis_Proc(s);

			// reduce vehicle amount by inserting PD-pair from one route to other routes
			s_temp = reduceVehicleNumber(s_temp);
			
			// use insertion procedure to reorder recorded routes
			int[] recordedRoutes = s_temp.getRecordedRoutes();
			if (recordedRoutes[0] != -1) {
				rrr.reorder(recordedRoutes[0], s_temp);
			}
			if (recordedRoutes[1] != -1) {
				rrr.reorder(recordedRoutes[1], s_temp);
			}

			Solution Sb_temp = nf.DLS_PDS_PDE(s_temp);
			Sb_temp = nf.DLS_PDR(Sb_temp, 10);					/// PDR 10 times
			
			if (compareSolutionCost(Sb_temp.cost(),currentBestCost) > 0 ) {
				currentBestCost = Sb_temp.cost();
				Sb = Sb_temp;
				NoImpr = 0;
			}
			else {
				NoImpr++;
			}
			
			s = Sb_temp;
		}
		return Sb;
	}
	
	private Solution reduceVehicleNumber(Solution s_temp) {
		// find the shortest route to work on
		int[] list = new int[s_temp.size()];
		for (int i=0;i<list.length;i++) {
			list[i] = s_temp.get(i).size();
		}
		
		int times = 0;
		int shortestRoute = 0;
		Solution result = null;
		
		while (times < list.length) {
		
			// try route with smallest size first
			shortestRoute = findShortest(list);
			
			// insertion trial
			result = insertionTrial(shortestRoute,s_temp);
			
			if (result != null) {
				break;
			}
			
			list[shortestRoute] = 0;
			times++;
		}
		
		if (result != null) {
			return result;
		}
		else {
			return s_temp;
		}
	}

	private int findShortest(int[] list) {
		int min = -1;
		for (int i=0;i<list.length;i++) {
			if (list[i] == 0) {
				continue;
			}
			else {
				if (min == -1) {
					min = i;
				}
				else {
					if (list[i] < list[min]) {
						min = i;
					}
				}
			}
			
		}
		return min;
	}
	
	private Solution insertionTrial(int shortestRoute, Solution s_temp) {
		Solution result = s_temp.clone();
		Route source = result.removeAt(shortestRoute);
		
		boolean isSuccessful = false;
		int currentIndex = -1;
		for (int i=0;i<source.size()/2;i++) {
			// pick a PD-pair
			Customer pickup = null;
			Customer delivery = null;
			for (int j=currentIndex+1;j< source.size();j++) {
				if (source.get(j).getDemand() > 0) {
					currentIndex = j;
					pickup = source.get(j);
					delivery = source.get(Customers.getSingleInstance().findPair(source, j));
					break;
				}
			}
			
			isSuccessful = findBestInsertion(pickup,delivery,result);
			if (!isSuccessful) {
				break;
			}
		}
		
		if (!isSuccessful) {
			return null;
		}
		else {
			// modify index of recorded routes
			int[] recordedRoutes = s_temp.getRecordedRoutes();
			int recordedRoute1 = -1;
			int recordedRoute2 = -1;
			if (shortestRoute < recordedRoutes[0]) {
				recordedRoute1 = recordedRoutes[0]-1;
				recordedRoute2 = recordedRoutes[1]-1;
			}
			else if (shortestRoute > recordedRoutes[1]) {}
			else if (shortestRoute == recordedRoutes[0]) {
				recordedRoute1 = -1;
				recordedRoute2 = recordedRoutes[1]-1;
			}
			else if (shortestRoute == recordedRoutes[1]) {
				recordedRoute1 = recordedRoutes[0];
				recordedRoute2 = -1;
			}
			else {
				recordedRoute1 = recordedRoutes[0]-1;
				recordedRoute2 = recordedRoutes[1];
			}
			
			if (recordedRoutes[0] == -1) {
				recordedRoute1 = -1;
			}
			if (recordedRoutes[1] == -1) {
				recordedRoute2 = -1;
			}
			
			result.setRecordedRoutes(recordedRoute1, recordedRoute2);
			
			return result;
		}
	
	}
	
	private boolean findBestInsertion(Customer pickup, Customer delivery,Solution result) {
		int targetRoute = -1;
		int pickupInsertion = -1;
		int deliveryInsertion = -1;
		int[] currentBestCost = null;
		
		for (int i=0;i<result.size();i++) {
			for (int m=0;m<result.get(i).size()+1;m++) {
				for (int n=m;n<result.get(i).size()+1;n++) {
					if (result.get(i).isInsertionFeasible(pickup, delivery, m, n, this.vp)) {
						if (currentBestCost == null) {
							targetRoute = i;
							pickupInsertion = m;
							deliveryInsertion = n;
							currentBestCost = result.get(i).costIncrement(pickup, delivery, m, n);
						}
						else {
							if ( compareCostIncrement(result.get(i).costIncrement(pickup, delivery, m, n),currentBestCost) > 0 ) {
								targetRoute = i;
								pickupInsertion = m;
								deliveryInsertion = n;
								currentBestCost = result.get(i).costIncrement(pickup, delivery, m, n);
							}
						}
					}
				}
			}
		}
		
		if (targetRoute != -1) {
			// insert
			result.get(targetRoute).insertAt(deliveryInsertion, delivery);
			result.get(targetRoute).insertAt(pickupInsertion, pickup);
			return true;
		}
		else {
			return false;
		}
	}

	private int compareCostIncrement(int[] costIncrement, int[] currentBestCost) {
		for (int i=0;i<3;i++) {
			if (costIncrement[i] != currentBestCost[i]) {
				return (costIncrement[i] < currentBestCost[i])? 1:-1;
			}
		}
		return 0;
	}

	private int compareSolutionCost(Object[] targetCost,Object[] currentBestCost) {
		for (int i=0;i<4;i++) {
			if (targetCost[i] != currentBestCost[i]) {
				if (i == 0) {
					return ((int)targetCost[i]<(int)currentBestCost[i])? 1:-1;
				}
				else {
					return ((double)targetCost[i]<(double)currentBestCost[i])? 1:-1;
				}
			}
		}
		return 0;
	}

	private Solution metropolis_Proc(Solution s) {
		Vector<Solution> neighbors = nf.findNeighbors(s);
		Solution newSolution;
		int delta;
		double prob;

		while (true) {
			
			int random = (int)( Math.random()*neighbors.size() );
			int newRandom = random;
			newSolution = neighbors.get( random );
			
			while(Tabu.getSingleInstance().isExist(newSolution.getEigenvalue())) {
				newRandom = (newRandom+1)%neighbors.size();
				
				if (newRandom == random) {
					return s;
				}
				else {
					newSolution = neighbors.get( newRandom );
				}
			}
			
			delta = newSolution.saCost() - s.saCost();
			if (delta <= 0) {
				prob = 1;
			}
			else {
				prob = Math.pow(Math.E,-(delta/TEMPERATURE));
			}
			
			if (Math.random()*100 <= prob*100) {
				TEMPERATURE = (int) (COOLINGRATIO * TEMPERATURE);
				if (TEMPERATURE == 0) {
					TEMPERATURE = 1;
				}
				Tabu.getSingleInstance().offerAndPoll(newSolution.getEigenvalue());
				break;
			}
		}
		
		return newSolution;
	}
}
